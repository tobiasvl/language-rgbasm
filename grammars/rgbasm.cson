# Syntax Highlighting for the RGBDS toolchain

scopeName: 'source.rgbasm'
fileTypes: [
  # http://www.devrs.com/gb/files/guide.txt
  'z80'
  'inc'
  'asm'
  'gb.s'
  's'
]
name: 'RGBDS Assembly'
patterns: [
  { include: '#comments' }   # comments
  { include: '#symbols' }    # labels, constants, numbers
  { include: '#directives' } # RGBDS assembler directives
]

# Repository starts here ------------------------------------------------------
repository:

  # comments
  comments:
    patterns: [
      # semicolon comments
      {
        match:  ';.*$'
        name:   'comment.line.semicolon.rgbasm'
      }
    ]

  # symbols
  symbols:
    patterns: [
      # strings
      {
        begin: '"'
        beginCaptures:
          0:
            name: 'punctuation.definition.string.begin.rgbasm'
        end: '"'
        endCaptures:
          0:
            name: 'punctuation.definition.string.end.rgbasm'
        name: 'string.quoted.double.rgbasm'
      }
      # float numbers
      {
        match: '\\b[0-9]\\.[0-9]\\b'
        name: 'constant.numberic.fixpoint.rgbasm'
      }
      # graphics
      {
        match: '`[0-3]+'
        name: 'constant.other.graphics.rgbasm'
      }
      # hex, prefixed with dollar sign($)
      {
        match: '\\$\\b[a-fA-F0-9]+\\b'
        name: 'constant.numeric.hex.rgbasm'
      }
      # binary
      {
        match: '%\\b[01]+\\b'
        name: 'constant.numeric.binary.rgbasm'
      }
      # decimal
      {
        match: '\\b([0-9]+)\\b'
        name: 'constant.numeric.decimal.rgbasm'
      }
      # octal
      {
        match: '&\\b[0-7]+\\b'
        name: 'constant.numeric.octal.rgbasm'
      }
    ]

  # assembler directives
  directives:
    patterns: [
      # 8-bit registers
      {
        match: '\\b(?i:[abcdehl])\\b'
        name: 'storage.other.register.8-bit.rgbasm'
      }
      # 16-bit registers
      {
        match: '\\b(?i:af|sp|bc|de|hl[\\+\\-id]?)\\b'
        name: 'storage.other.register.16-bit.rgbasm'
      }
      # RGBDS builtin functions
      {
        match: '\\b(?i:STR(LEN|CAT|CMP|IN|SUB|UPR|LWR)|BANK|DEF|HIGH|LOW|FUNC|DIV|MUL|A?(SIN|COS|TAN2?))(?=\\()\\b'
        name: 'support.function.rgbasm'
      }
      # assembler directives
      {
        match: '\\b(?i:MACRO|ENDM|REPT|ENDR|DB|DW|DS|INCLUDE|INCBIN|EQUS?|SECTION|SET|RSSET|RSRESET|RB|RW|RL|EXPORT|GLOBAL|PURGE|SHIFT|UNION|NEXTU|ENDU|PRINTT|PRINTV|PRINTF|FAIL|WARN|OPT|PUSHS|POPS|PUSHO|POPO|OPT)\\b'
        name: 'support.function.pseudo.rgbasm'
      }
      # if elif else
      {
        match: '\\b(?i:(EL)?IF|ELSE|EMDC|n?[zc])\\b'
        name: 'keyword.control.conditional.rgbasm'
      }
      # RGBDS assembler constants
      {
        match: '_\\b(?i:PI|RS|NARG|_LINE__|_FILE__|_DATE__|_TIME__|_ISO_8601_LOCAL__|_ISO_8601_UTC__|_UTC_YEAR__|_UTC_MONTH__|_UTC_DAY__|_UTC_HOUR__|_UTC_MINUTE__|_UTC_SECOND__|_RGBDS_MAJOR__|_RGBDS_MINOR__|_RGBDS_PATCH__)\\b'
        name: 'constant.language.rgbasm'
      }
      # section base directives
      {
        match: '\\b(ROM0|ROMX|VRAM|SRAM|WRAM0|WRAMX|OAM|HRAM|ALIGN|BANK|HOME|BSS)\\b'
        name: 'constant.language.rgbasm'
      }
      # opcodes
      {
        match: '\\b(?i:j[pr]|call|reti?|ld(i|d|h)?|push|pop|ad(d|c)|sub|sbc|and|x?or|cp|inc|dec|daa|cpl|rlca|rla|rrca|rra|rlc|rl|rrc|rr|sla|swap|sra|srl|bit|res|set|ccf|scf|nop|halt|stop|di|ei|rst)\\b'
        name: 'keyword.mnemonic.rgbasm'
      }
      # braces
      {
        match: '(\\[|\\])'
        name: 'meta.brace.square.rgbasm'
      }
      # operators
      {
        match: '\\~|\\+|\\-|\\*|\\/|\\%|<<?|>>?|\\&|\\||\\^|(!|=|<|>)=|!'
        name: 'keyword.operator.rgbasm'
      }
      # global labels
      {
        captures:
          1: name: 'entity.name.function.label.rgbasm'
          2: name: 'entity.name.function.label.rgbasm'
        match: '^([a-zA-Z_][a-zA-Z0-9_\\@\\.]*?)(::?)?\\s+'
      }
      # local labels
      {
        captures:
          1: name: 'entity.name.function.label.rgbasm'
          2: name: 'entity.name.function.label.rgbasm'
        match: '^(\\.[a-zA-Z_][a-zA-Z0-9_\\@]*?)(:)?\\s+'
      }
    ]
